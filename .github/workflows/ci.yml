name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.21'
  PLUGIN_NAME: cors-regex
  DOCKER_IMAGE: liquidlogiclabs/traefik-plugin-cors-regex

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run tests
      run: go test ./src/... -v -race -coverprofile=coverage.out
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Get version
      id: version
      run: |
        if [ -f VERSION ]; then
          echo "version=$(cat VERSION | tr -d '\n')" >> $GITHUB_OUTPUT
        else
          echo "version=0.1.0" >> $GITHUB_OUTPUT
        fi
        
    - name: Build plugin
      run: |
        mkdir -p build
        platforms=("linux/amd64" "linux/arm64" "darwin/amd64" "darwin/arm64")
        
        for platform in "${platforms[@]}"; do
          os=$(echo "$platform" | cut -d'/' -f1)
          arch=$(echo "$platform" | cut -d'/' -f2)
          output_name="${PLUGIN_NAME}-${{ steps.version.outputs.version }}-${os}-${arch}"
          
          echo "Building for $platform..."
          CGO_ENABLED=0 GOOS=$os GOARCH=$arch go build \
            -a -installsuffix cgo \
            -ldflags "-X main.version=${{ steps.version.outputs.version }}" \
            -o "build/$output_name" \
            ./src/
        done
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: build/
        retention-days: 30

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Get version
      id: version
      run: |
        if [ -f VERSION ]; then
          echo "version=$(cat VERSION | tr -d '\n')" >> $GITHUB_OUTPUT
        else
          echo "version=0.1.0" >> $GITHUB_OUTPUT
        fi
        
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
          ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: build/
        
    - name: Get version
      id: version
      run: |
        if [ -f VERSION ]; then
          echo "version=$(cat VERSION | tr -d '\n')" >> $GITHUB_OUTPUT
        else
          echo "version=0.1.0" >> $GITHUB_OUTPUT
        fi
        
    - name: Create release artifacts
      run: |
        mkdir -p "release/${{ steps.version.outputs.version }}"
        cp build/* "release/${{ steps.version.outputs.version }}/"
        
        cd "release/${{ steps.version.outputs.version }}"
        for file in *; do
          if [ -f "$file" ]; then
            sha256sum "$file" > "$file.sha256"
          fi
        done
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: release/
        retention-days: 90

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
